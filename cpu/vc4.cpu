; Broadcom Videocore4 CPU description.  -*- Scheme -*-
;
; Copyright 2015 Free Software Foundation, Inc.
;
; Contributed by Red Hat Inc; developed under contract from Renesas.
;
; This file is part of the GNU Binutils.
;
; This program is free software; you can redistribute it and/or modify
; it under the terms of the GNU General Public License as published by
; the Free Software Foundation; either version 3 of the License, or
; (at your option) any later version.
;
; This program is distributed in the hope that it will be useful,
; but WITHOUT ANY WARRANTY; without even the implied warranty of
; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
; GNU General Public License for more details.
;
; You should have received a copy of the GNU General Public License
; along with this program; if not, write to the Free Software
; Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston,
; MA 02110-1301, USA.

(include "simplify.inc")

(define-arch
  (name videocore)
  (comment "Broadcom Videocore")
  (default-alignment aligned)
  (insn-lsb0? #t)
  (machs vc4)
  (isas vc4)
)

(define-isa
  (name vc4)
  (comment "Videocore4 instruction set")
  (base-insn-bitsize 16)
  (default-insn-bitsize 16)
  (default-insn-word-bitsize 16)
)

(define-cpu
  (name videocore4)
  (comment "Videocore4 processor")
  (endian little)
  (word-bitsize 32)
)

(define-mach
  (name vc4)
  (comment "Videocore4 machine")
  (cpu videocore4)
)

(define-model
  (name vc4)
  (comment "Videocore4 processor")
  (mach vc4)
  (unit u-exec "Execution unit" ()
      1 1 ; issue done
      () ; state
      () ; inputs
      () ; outputs
      ()) ; profile action (default)
)

(define-hardware
  (name h-reg)
  (comment "32-bit registers")
  (type register SI (32))
  (indices keyword "" (("r0"  0)  ("r1"  1)  ("r2"  2)  ("r3"  3)
		       ("r4"  4)  ("r5"  5)  ("r6"  6)  ("r7"  7)
		       ("r8"  8)  ("r9"  9)  ("r10" 10) ("r11" 11)
		       ("r12" 12) ("r13" 13) ("r14" 14) ("r15" 15)
		       ("r16" 16) ("r17" 17) ("r18" 18) ("r19" 19)
		       ("r20" 20) ("r21" 21) ("r22" 22) ("r23" 23)
		       ("gp"  24) ("sp"  25) ("lr"  26) ("r27" 27)
		       ("r28" 28) ("r29" 29) ("r30" 30) ("r31" 31)))
)

(define-hardware
  (name h-fastreg)
  (comment "32-bit fast registers")
  (type register SI (16))
  (indices keyword "" (("r0"  0)  ("r1"  1)  ("r2"  2)  ("r3"  3)
		       ("r4"  4)  ("r5"  5)  ("r6"  6)  ("r7"  7)
		       ("r8"  8)  ("r9"  9)  ("r10" 10) ("r11" 11)
		       ("r12" 12) ("r13" 13) ("r14" 14) ("r15" 15)))
)

(define-hardware
  (name h-ppreg)
  (comment "Push/pop start registers")
  (type register SI (4))
  (indices keyword "" (("r0" 0) ("r6" 1) ("r16" 2) ("r24" 3)))
)

(define-hardware
  (name h-cond)
  (comment "Condition codes")
  (type immediate UQI)
  (values keyword ""
    (("eq" 0)
     ("ne" 1)
     ("cs" 2) ("lo" 2)
     ("cc" 3) ("hs" 3)
     ("mi" 4)
     ("pl" 5)
     ("vs" 6)
     ("vc" 7)
     ("hi" 8)
     ("ls" 9)
     ("ge" 10)
     ("lt" 11)
     ("gt" 12)
     ("le" 13)
     ("" 14)
     ("f" 15)))
)

(define-hardware
  (name h-accsz)
  (comment "Access size")
  (type immediate UQI)
  (values keyword ""
    (("" 0)
     ("h" 1)
     ("b" 2)
     ("sh" 3)))
)

(dnh h-pc "program counter" (PC) (pc) () () ())

(df f-oplen "Opcode length field" () 15 4 UINT #f #f)

(df f-op15-13 "Opcode bits 15-13" () 15 3 UINT #f #f)

(df f-op15-11 "Opcode bits 15-11" () 15 5 UINT #f #f)

(df f-op11-8 "Opcode bits 11-8" () 11 4 UINT #f #f)

(df f-op11-9 "Opcode bits 11-9" () 11 3 UINT #f #f)

(df f-op11-10 "Opcode bits 11-10" () 11 2 UINT #f #f)

(df f-op11 "Opcode bit 11" () 11 1 UINT #f #f)

(df f-op10-9 "Opcode bits 10-9" () 10 2 UINT #f #f)

(df f-op10-7 "Opcode bits 10-7" () 10 4 UINT #f #f)

(df f-alu16op "ALU16 opcodes" () 12 5 UINT #f #f)

(df f-op9-5 "Opcode bits 9-5" () 9 5 UINT #f #f)

(df f-spoffset "SP offset" () 8 5 UINT
  ((value pc) (srl UINT value 2))
  ((value pc) (sll UINT value 2)))

(df f-op8 "Opcode bit 8" () 8 1 UINT #f #f)

(df f-op7-4 "Opcode bits 7-4" () 7 4 UINT #f #f)

(df f-op7-5 "Opcode bits 7-5" () 7 3 UINT #f #f)

(df f-op7-6 "Opcode bits 7-6" () 7 2 UINT #f #f)

(df f-op7 "Opcode bit 7" () 7 1 UINT #f #f)

(df f-op6-5 "Opcode bits 6-5" () 6 2 UINT #f #f)

(df f-op5-0 "Opcode bits 5-0" () 5 6 UINT #f #f)

(df f-op4 "Opcode bit 4" () 4 1 UINT #f #f)

(df f-op4-0 "Opcode bits 4-0" () 4 5 UINT #f #f)

(df f-op3-0 "Opcode bits 3-0" () 3 4 UINT #f #f)

(define-pmacro (minus-base x-base)
  (df (.sym f-op4-0-base- x-base) (.str "Opcode bits 4-0, base " x-base) ()
    4 5 UINT
    ((value pc) (and UINT (sub UINT value x-base) 31))
    ((value pc) (and UINT (add UINT value x-base) 31)))
)

(minus-base 0)
(minus-base 6)
(minus-base 16)
(minus-base 24)

;; Define fields in subsequent instruction (16-bit) words, after the first.

(define-pmacro (df2 x-name x-comment x-attrs x-offset x-wordlen
		    x-start x-length x-enc x-dec)
  (define-ifield
    (name x-name)
    (comment x-comment)
    (.splice attrs (.unsplice x-attrs))
    (word-offset x-offset)
    (word-length x-wordlen)
    (start x-start)
    (length x-length)
    (mode UINT)
    (.splice encode (.unsplice x-enc))
    (.splice decode (.unsplice x-dec)))
)

(df2 f-op20-16 "Opcode bits 20-16" () 16 16 4 5 (#f) (#f))

(df2 f-op22-21 "Opcode bits 22-21" () 16 16 6 2 (#f) (#f))

(df2 f-op26-23 "Opcode bits 26-23" () 16 16 10 4 (#f) (#f))

(df2 f-op31-27 "Opcode bits 31-27" () 16 16 15 5 (#f) (#f))

(df2 f-op47-16 "Opcode bits 47-16" () 16 32 31 32 (#f) (#f))

(define-normal-insn-enum
  insn-oplen "length field" () OPLEN_ f-oplen
  (.map .str (.iota 16))
)

(define-normal-insn-enum
  insn-op15-13 "insn bits 15-13" () OP15_13_ f-op15-13
  (.map .str (.iota 8))
)

(define-pmacro ops5bit
  (MOV CMN ADD BIC MUL EOR SUB AND
   NOT ROR CMP RSUB BTST OR BMASK MAX
   BSET MIN BCLR ADDS2 BCHG ADDS4 ADDS8 ADDS16
   SIGNEXT NEG LSR COUNT LSL BREV ASR ABS)
)

(define-normal-insn-enum
  insn-alu16op "insn alu16 ops" () ALU16OP_ f-alu16op
  ops5bit
)

(define-normal-insn-enum
  insn-alu32op "insn alu32 ops" () ALU32OP_ f-op9-5
  ops5bit
)

(define-normal-insn-enum
  insn-op11-8 "insn bits 11-8" () OP11_8_ f-op11-8
  (.map .str (.iota 16))
)

(define-normal-insn-enum
  insn-op11-10 "insn bits 11-10" () OP11_10_ f-op11-10
  (.map .str (.iota 4))
)

(define-normal-insn-enum
  insn-op11 "insn bit 11" () OP11_ f-op11
  ("0" "1")
)

(define-normal-insn-enum
  insn-op8 "insn bit 8" () OP8_ f-op8
  ("0" "1")
)

(define-normal-insn-enum
  insn-op7-5 "insn bits 7-5" () OP7_5_ f-op7-5
  (.map .str (.iota 8))
)

(define-normal-insn-enum
  insn-op7-6 "insn bits 7-6" () OP7_6_ f-op7-6
  (.map .str (.iota 4))
)

(define-normal-insn-enum
  insn-op7 "insn bit 7" () OP7_ f-op7
  ("0" "1")
)

(define-normal-insn-enum
  insn-op6-5 "insn bits 6-5" () OP6_5_ f-op6-5
  ("0" "6" "16" "24")
)

(define-normal-insn-enum
  insn-op4-0 "insn bits 4-0" () OP4_0_ f-op4-0
  (.map .str (.iota 32))
)

(define-normal-insn-enum
  insn-op4 "insn bit 4" () OP4_ f-op4
  ("0" "1")
)

(define-normal-insn-enum
  insn-op3-0 "insn bits 3-0" () OP3_0_ f-op3-0
  (.map .str (.iota 16))
)

(define-normal-insn-enum
  insn-op22-21 "insn bits 22-21" () OP22_21_ f-op22-21
  (.map .str (.iota 4))
)

(define-normal-operand
  alu16sreg
  "" ()
  h-fastreg
  f-op7-4
)

(define-normal-operand
  alu16dreg
  "" ()
  h-fastreg
  f-op3-0
)

(define-normal-operand
  alu32dreg
  "" ()
  h-reg
  f-op4-0
)

(define-normal-operand
  alu32breg
  "" ()
  h-reg
  f-op20-16
)

(define-normal-operand
  ppstartreg
  "" ()
  h-ppreg
  f-op6-5
)

(define-pmacro (ppendregbase x-base)
  (define-normal-operand
    (.sym ppendreg x-base)
    "" ()
    h-reg
    (.sym f-op4-0-base- x-base))
)

(ppendregbase 0)
(ppendregbase 6)
(ppendregbase 16)
(ppendregbase 24)

(define-normal-operand
  swi_imm
  "" ()
  h-uint
  f-op5-0
)

(define-normal-operand
  spoffset
  "" ()
  h-uint
  f-spoffset
)

(define-normal-operand
  alu32areg
  "" ()
  h-reg
  f-op31-27
)

(define-normal-operand
  alu32cond
  "" ()
  h-cond
  f-op26-23
)

(define-normal-operand
  alu48isreg
  "" ()
  h-reg
  f-op9-5
)

(define-normal-operand
  alu48idreg
  "" ()
  h-reg
  f-op4-0
)

(define-normal-operand
  alu48immu
  "" ()
  h-uint
  f-op47-16
)

(define-normal-operand
  accsz
  "" ()
  h-accsz
  f-op10-9
)

(define-pmacro (nulop16 x-name x-comment x-syntax x-opcode)
  (define-normal-insn
    x-name x-comment ()
    x-syntax
    (+ OPLEN_0 OP11_8_0 OP7_5_0 OP4_0 x-opcode)
    () ())
)

(nulop16 halt "HALT" "halt" OP3_0_0)
(nulop16 nop  "NOP"  "nop"  OP3_0_1)
(nulop16 wait "WAIT" "wait" OP3_0_2)
(nulop16 user "USER" "user" OP3_0_3)
(nulop16 ei   "EI"   "ei"   OP3_0_4)
(nulop16 di   "DI"   "di"   OP3_0_5)
(nulop16 clr  "CLR"  "clr"  OP3_0_6)
(nulop16 inc  "INC"  "inc"  OP3_0_7)
(nulop16 chg  "CHG"  "chg"  OP3_0_8)
(nulop16 dec  "DEC"  "dec"  OP3_0_9)
(nulop16 rti  "RTI"  "rti"  OP3_0_10)

(define-normal-insn
  swireg "SWIREG" ()
  "swi $alu32dreg"
  (+ OPLEN_0 OP11_8_0 OP7_5_1 alu32dreg)
  () ()
)

(define-normal-insn
  rts "RTS" ()
  "rts"
  (+ OPLEN_0 OP11_8_0 OP7_5_2 OP4_1 OP3_0_10)
  () ()
)

(define-normal-insn
  breg "BREG" ()
  "b $alu32dreg"
  (+ OPLEN_0 OP11_8_0 OP7_5_2 alu32dreg)
  () ()
)

(define-normal-insn
  blreg "BLREG" ()
  "bl $alu32dreg"
  (+ OPLEN_0 OP11_8_0 OP7_5_3 alu32dreg)
  () ()
)

(define-normal-insn
  tbb "TBB" ()
  "tbb $alu32dreg"
  (+ OPLEN_0 OP11_8_0 OP7_5_4 alu32dreg)
  () ()
)

(define-normal-insn
  tbh "TBH" ()
  "tbh $alu32dreg"
  (+ OPLEN_0 OP11_8_0 OP7_5_5 alu32dreg)
  () ()
)

(define-normal-insn
  movcpuid "MOVCPUID" ()
  "mov $alu32dreg,cpuid"
  (+ OPLEN_0 OP11_8_0 OP7_5_7 alu32dreg)
  () ()
)

(define-normal-insn
  swiimm "SWIIMM" ()
  "swi $swi_imm"
  (+ OPLEN_0 OP11_8_1 OP7_6_3 swi_imm)
  () ()
)

(define-normal-insn
  pushrn "PUSHRN" ()
  "push $ppstartreg"
  (+ OPLEN_0 OP11_8_2 OP7_1 ppstartreg OP4_0_0)
  () ()
)

(define-normal-insn
  pushrnlr "PUSHRNLR" ()
  "push $ppstartreg,lr"
  (+ OPLEN_0 OP11_8_3 OP7_1 ppstartreg OP4_0_0)
  () ()
)

(define-pmacro (pushrnbase x-base x-lr x-op11-8)
  (define-normal-insn
    (.sym pushrnrm x-base x-lr) (.str "PUSHR" x-base "RM") ()
    (.str "push r" x-base "-$ppendreg" x-base x-lr)
    (+ OPLEN_0 x-op11-8 OP7_1 (.sym OP6_5_ x-base) (.sym ppendreg x-base))
    () ())
)

(pushrnbase 0 "" OP11_8_2)
(pushrnbase 6 "" OP11_8_2)
(pushrnbase 16 "" OP11_8_2)
(pushrnbase 24 "" OP11_8_2)

(pushrnbase 0 ",lr" OP11_8_3)
(pushrnbase 6 ",lr" OP11_8_3)
(pushrnbase 16 ",lr" OP11_8_3)
(pushrnbase 24 ",lr" OP11_8_3)

(define-normal-insn
  poprn "POPRN" ()
  "pop $ppstartreg"
  (+ OPLEN_0 OP11_8_2 OP7_0 ppstartreg OP4_0_0)
  () ()
)

(define-normal-insn
  poprnpc "POPRNPC" ()
  "pop $ppstartreg,pc"
  (+ OPLEN_0 OP11_8_3 OP7_0 ppstartreg OP4_0_0)
  () ()
)

(define-pmacro (poprnbase x-base x-lr x-op11-8)
  (define-normal-insn
    (.sym poprnrm x-base x-lr) (.str "POPR" x-base "RM") ()
    (.str "pop r" x-base "-$ppendreg" x-base x-lr)
    (+ OPLEN_0 x-op11-8 OP7_0 (.sym OP6_5_ x-base) (.sym ppendreg x-base))
    () ())
)

(poprnbase 0 "" OP11_8_2)
(poprnbase 6 "" OP11_8_2)
(poprnbase 16 "" OP11_8_2)
(poprnbase 24 "" OP11_8_2)

(poprnbase 0 ",pc" OP11_8_3)
(poprnbase 6 ",pc" OP11_8_3)
(poprnbase 16 ",pc" OP11_8_3)
(poprnbase 24 ",pc" OP11_8_3)

(define-normal-insn
  ldsp "LDSP" ()
  "ld $alu16dreg,$spoffset(sp)"
  (+ OPLEN_0 (f-op11-9 2) spoffset alu16dreg)
  () ()
)

(define-normal-insn
  stsp "STSP" ()
  "st $alu16dreg,$spoffset(sp)"
  (+ OPLEN_0 (f-op11-9 3) spoffset alu16dreg)
  () ()
)

(define-normal-insn
  ldind "LDIND" ()
  "ld$accsz $alu16dreg,($alu16sreg)"
  (+ OPLEN_0 OP11_1 accsz OP8_0 alu16sreg alu16dreg)
  () ()
)

(define-normal-insn
  stind "STIND" ()
  "st$accsz $alu16dreg,($alu16sreg)"
  (+ OPLEN_0 OP11_1 accsz OP8_1 alu16sreg alu16dreg)
  () ()
)

(define-normal-insn
  add16 "ADD16" ()
  "add $alu16dreg,$alu16sreg"
  (+ OP15_13_2 ALU16OP_ADD alu16sreg alu16dreg)
  () ()
)

(define-normal-insn
  add32 "ADD32" ()
  "add$alu32cond $alu32dreg,$alu32areg,$alu32breg"
  (+ OPLEN_12 OP11_10_0 ALU32OP_ADD alu32dreg
     alu32areg alu32cond OP22_21_0 alu32breg)
  () ()
)

(define-normal-insn
  add48i "ADD48I" ()
  "add $alu48idreg,$alu48isreg,#$alu48immu"
  (+ OPLEN_14 OP11_10_3 alu48isreg alu48idreg
     alu48immu)
  () ()
)
