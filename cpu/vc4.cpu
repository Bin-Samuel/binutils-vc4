; Broadcom Videocore4 CPU description.  -*- Scheme -*-
;
; Copyright 2015 Free Software Foundation, Inc.
;
; Contributed by Red Hat Inc; developed under contract from Renesas.
;
; This file is part of the GNU Binutils.
;
; This program is free software; you can redistribute it and/or modify
; it under the terms of the GNU General Public License as published by
; the Free Software Foundation; either version 3 of the License, or
; (at your option) any later version.
;
; This program is distributed in the hope that it will be useful,
; but WITHOUT ANY WARRANTY; without even the implied warranty of
; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
; GNU General Public License for more details.
;
; You should have received a copy of the GNU General Public License
; along with this program; if not, write to the Free Software
; Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston,
; MA 02110-1301, USA.

(include "simplify.inc")

(define-arch
  (name videocore)
  (comment "Broadcom Videocore")
  (default-alignment aligned)
  (insn-lsb0? #t)
  (machs vc4)
  (isas vc4)
)

(define-isa
  (name vc4)
  (comment "Videocore4 instruction set")
  (base-insn-bitsize 16)
  (default-insn-bitsize 16)
  (default-insn-word-bitsize 16)
)

(define-cpu
  (name videocore4)
  (comment "Videocore4 processor")
  (endian little)
  (word-bitsize 32)
)

(define-mach
  (name vc4)
  (comment "Videocore4 machine")
  (cpu videocore4)
)

(define-model
  (name vc4)
  (comment "Videocore4 processor")
  (mach vc4)
  (unit u-exec "Execution unit" ()
      1 1 ; issue done
      () ; state
      () ; inputs
      () ; outputs
      ()) ; profile action (default)
)

(define-hardware
  (name h-reg)
  (comment "32-bit registers")
  (type register SI (32))
  (indices keyword "" (("r0"  0)  ("r1"  1)  ("r2"  2)  ("r3"  3)
		       ("r4"  4)  ("r5"  5)  ("r6"  6)  ("r7"  7)
		       ("r8"  8)  ("r9"  9)  ("r10" 10) ("r11" 11)
		       ("r12" 12) ("r13" 13) ("r14" 14) ("r15" 15)
		       ("r16" 16) ("r17" 17) ("r18" 18) ("r19" 19)
		       ("r20" 20) ("r21" 21) ("r22" 22) ("r23" 23)
		       ("gp"  24) ("sp"  25) ("lr"  26) ("r27" 27)
		       ("r28" 28) ("r29" 29) ("r30" 30) ("r31" 31)))
)

(define-hardware
  (name h-fastreg)
  (comment "32-bit fast registers")
  (type register SI (16))
  (indices keyword "" (("r0"  0)  ("r1"  1)  ("r2"  2)  ("r3"  3)
		       ("r4"  4)  ("r5"  5)  ("r6"  6)  ("r7"  7)
		       ("r8"  8)  ("r9"  9)  ("r10" 10) ("r11" 11)
		       ("r12" 12) ("r13" 13) ("r14" 14) ("r15" 15)))
)

(define-hardware
  (name h-cond)
  (comment "Condition codes")
  (type immediate UQI)
  (values keyword ""
    (("eq" 0)
     ("ne" 1)
     ("cs" 2) ("lo" 2)
     ("cc" 3) ("hs" 3)
     ("mi" 4)
     ("pl" 5)
     ("vs" 6)
     ("vc" 7)
     ("hi" 8)
     ("ls" 9)
     ("ge" 10)
     ("lt" 11)
     ("gt" 12)
     ("le" 13)
     ("" 14)
     ("f" 15)))
)

(define-hardware
  (name "h-accsz")
  (comment "Access size")
  (type immediate UQI)
  (values keyword ""
    (("" 0)
     ("h" 1)
     ("b" 2)
     ("sh" 3)))
)

(dnh h-pc "program counter" (PC) (pc) () () ())

(df f-oplen "Opcode length field" () 15 4 UINT #f #f)

(df f-op15-13 "Opcode bits 15-13" () 15 3 UINT #f #f)

(df f-op11-8 "Opcode bits 11-8" () 11 4 UINT #f #f)

(df f-op11-10 "Opcode bits 11-10" () 11 2 UINT #f #f)

(df f-alu16op "ALU16 opcodes" () 12 5 UINT #f #f)

(df f-alu32op "ALU32 opcodes" () 9 5 UINT #f #f)

(df f-op7-4 "Opcode bits 7-4" () 7 4 UINT #f #f)

(df f-op7-5 "Opcode bits 7-5" () 7 3 UINT #f #f)

(df f-op4 "Opcode bit 4" () 4 1 UINT #f #f)

(df f-op4-0 "Opcode bits 4-0" () 4 5 UINT #f #f)

(df f-op3-0 "Opcode bits 3-0" () 3 4 UINT #f #f)

(df f-op20-16 "Opcode bits 20-16" () 20 5 UINT #f #f)

(df f-op22-21 "Opcode bits 22-21" () 22 2 UINT #f #f)

(df f-op26-23 "Opcode bits 26-23" () 26 4 UINT #f #f)

(df f-op31-27 "Opcode bits 31-27" () 31 5 UINT #f #f)

(define-normal-insn-enum
  insn-oplen "length field" () OPLEN_ f-oplen
  (.map .str (.iota 16))
)

(define-normal-insn-enum
  insn-op15-13 "insn bits 15-13" () OP15_13_ f-op15-13
  (.map .str (.iota 8))
)

(define-normal-insn-enum
  insn-alu16op "insn alu16 ops" () ALU16OP_ f-alu16op
  (MOV CMN ADD BIC MUL EOR SUB AND
   NOT ROR CMP RSUB BTST OR BMASK MAX
   BSET MIN BCLR ADDS2 BCHG ADDS4 ADDS8 ADDS16
   SIGNEXT NEG LSR COUNT LSL BREV ASR ABS)
)

(define-normal-insn-enum
  insn-alu32op "insn alu32 ops" () ALU32OP_ f-alu32op
  (MOV CMN ADD BIC MUL EOR SUB AND
   NOT ROR CMP RSUB BTST OR BMASK MAX
   BSET MIN BCLR ADDS2 BCHG ADDS4 ADDS8 ADDS16
   SIGNEXT NEG LSR COUNT LSL BREV ASR ABS)
)

(define-normal-insn-enum
  insn-op11-8 "insn bits 11-8" () OP11_8_ f-op11-8
  (.map .str (.iota 16))
)

(define-normal-insn-enum
  insn-op11-10 "insn bits 11-10" () OP11_10_ f-op11-10
  (.map .str (.iota 4))
)

(define-normal-insn-enum
  insn-op7-4 "insn bits 7-4" () OP4_7_ f-op7-4
  (.map .str (.iota 16))
)

(define-normal-insn-enum
  insn-op7-5 "insn bits 7-5" () OP7_5_ f-op7-5
  (.map .str (.iota 8))
)

(define-normal-insn-enum
  insn-op4 "insn bit 4" () OP4_ f-op4
  ("0" "1")
)

(define-normal-insn-enum
  insn-op3-0 "insn bits 3-0" () OP3_0_ f-op3-0
  (.map .str (.iota 16))
)

(define-normal-insn-enum
  insn-op20-16 "insn bits 20-16" () OP16_20_ f-op20-16
  (.map .str (.iota 32))
)

(define-normal-insn-enum
  insn-op22-21 "insn bits 22-21" () OP22_21_ f-op22-21
  (.map .str (.iota 4))
)

(define-normal-insn-enum
  insn-op26-23 "insn bits 26-23" () OP26_23_ f-op26-23
  (.map .str (.iota 16))
)

(define-normal-insn-enum
  insn-op31-27 "insn bits 31-27" () OP31_27_ f-op31-27
  (.map .str (.iota 32))
)

(define-normal-operand
  alu16sreg
  "" ()
  h-fastreg
  f-op7-4
)

(define-normal-operand
  alu16dreg
  "" ()
  h-fastreg
  f-op3-0
)

(define-normal-operand
  alu32dreg
  "" ()
  h-reg
  f-op4-0
)

(define-normal-operand
  alu32breg
  "" ()
  h-reg
  f-op20-16
)

(define-normal-operand
  alu32areg
  "" ()
  h-reg
  f-op31-27
)

(define-normal-operand
  alu32cond
  "" ()
  h-cond
  f-op26-23
)

(define-normal-insn
  halt "HALT" ()
  "halt"
  (+ OPLEN_0 OP11_8_0 OP7_5_0 OP4_0 OP3_0_0)
  () ()
)

(define-normal-insn
  add16 "ADD16" ()
  "add $alu16dreg,$alu16sreg"
  (+ OP15_13_2 ALU16OP_ADD alu16sreg alu16dreg)
  () ()
)

(define-normal-insn
  add32 "ADD32" ()
  "add$alu32cond $alu32dreg,$alu32areg,$alu32breg"
  (+ OPLEN_12 OP11_10_0 ALU32OP_ADD alu32dreg alu32areg alu32cond OP22_21_0
     alu32breg)
  () ()
)
